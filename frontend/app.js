// –ò–º–ø–æ—Ä—Ç—ã
import 'wailsjs/runtime';
import * as API from 'wailsjs/go/handlers/TaskHandler';

// –£—Ç–∏–ª–∏—Ç—ã
const $ = (s) => document.querySelector(s);
const $$ = (s) => Array.from(document.querySelectorAll(s));
const B = () => API;

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function showToast(msg, type="info") {
  const host = $("#toastHost");
  if (!host) {
    console.error('Toast host not found');
    return;
  }
  const el = document.createElement("div");
  el.className = "toast";
  el.textContent = msg;
  if (type === "error") {
    el.style.borderColor = "color-mix(in oklab, var(--danger) 35%, var(--hairline))";
  }
  host.appendChild(el);
  setTimeout(() => el.remove(), 2500);
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
function closeCreateModal() {
  $("#createModal")?.classList.add("hidden");
}

// –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
async function callCreate({title, body, priority, due_at}) {
  console.log('üîÑ callCreate started with:', { title, body, priority, due_at });
  
  const fn = B().CreateTask;
  if (!fn) {
    console.error('‚ùå CreateTask function not found');
    throw new Error('CreateTask function not available');
  }
  
  return fn({
    title: title,
    body: body || '',
    priority: priority || 'medium',
    due_at: due_at || null
  });
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
$("#createForm").addEventListener("submit", async (e) => {
  e.preventDefault();
  console.log('üéØ Form submitted');

  // –ü–æ–ª—É—á–∞–µ–º –∫–Ω–æ–ø–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
  const saveButton = $("#createSave");
  if (!saveButton) {
    console.error('‚ùå Save button not found');
    return;
  }

  // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
  const title = $("#c_title")?.value?.trim();
  const body = $("#c_body")?.value?.trim();
  const due = $("#c_due")?.value;
  const priority = $("#c_priority")?.value;

  console.log('üìù Form data:', { title, body, due, priority });

  // –í–∞–ª–∏–¥–∞—Ü–∏—è
  if (!title) {
    showToast("–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫", "error");
    $("#c_title")?.focus();
    return;
  }

  // –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É
  saveButton.disabled = true;
  saveButton.textContent = "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ‚Ä¶";

  try {
    // –í—ã–∑—ã–≤–∞–µ–º API
    const result = await callCreate({
      title,
      body,
      priority,
      due_at: due ? new Date(due).toISOString() : null
    });

    console.log('‚úÖ Task created:', result);
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
    closeCreateModal();
    showToast("–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞");
    await fetchAll();
    
    // –í—ã–±–∏—Ä–∞–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
    const last = state.all.reduce((m,t)=> t.id>m.id ? t : m, state.all[0] || null);
    if (last) {
      state.selectedId = last.id;
    }
    
    render();
  } catch (error) {
    console.error('üí• Error creating task:', error);
    showToast("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É", "error");
  } finally {
    // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É
    saveButton.disabled = false;
    saveButton.textContent = "–î–æ–±–∞–≤–∏—Ç—å";
  }
});