// –ò–º–ø–æ—Ä—Ç—ã
import 'wailsjs/runtime';
import * as API from 'wailsjs/go/handlers/TaskHandler';

// –û–¢–õ–ê–î–ö–ê: –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–ª–æ—Å—å
console.log('üîç API imported:', API);
console.log('üîç Available API methods:', Object.keys(API || {}));

// –£—Ç–∏–ª–∏—Ç—ã
const $ = (s) => document.querySelector(s);
const $$ = (s) => Array.from(document.querySelectorAll(s));

// –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
let state = {
  all: [],
  selectedId: null,
  filter: 'all',
  priority: null,
  sortBy: 'created_at',
  sortOrder: 'desc'
};

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function showToast(msg, type = "info") {
  const host = $("#toastHost");
  if (!host) {
    console.error('Toast host not found');
    alert(msg); // fallback
    return;
  }
  const el = document.createElement("div");
  el.className = "toast";
  el.textContent = msg;
  if (type === "error") {
    el.style.borderColor = "color-mix(in oklab, var(--danger) 35%, var(--hairline))";
  }
  host.appendChild(el);
  setTimeout(() => {
    if (el.parentNode) {
      el.remove();
    }
  }, 2500);
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
function closeCreateModal() {
  const modal = $("#createModal");
  if (modal) {
    modal.classList.add("hidden");
  }
}

function openCreateModal() {
  const modal = $("#createModal");
  if (modal) {
    modal.classList.remove("hidden");
    // –§–æ–∫—É—Å –Ω–∞ –∑–∞–≥–æ–ª–æ–≤–æ–∫
    const titleInput = $("#c_title");
    if (titleInput) {
      setTimeout(() => titleInput.focus(), 100);
    }
  }
}

// API —Ñ—É–Ω–∫—Ü–∏–∏ - –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –ø–æ–¥ —Ä–µ–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
async function callCreate({title, body, priority, due_at}) {
  console.log('üîÑ callCreate started with:', { title, body, priority, due_at });
  
  if (!API?.CreateTask) {
    console.error('‚ùå CreateTask function not found');
    throw new Error('CreateTask function not available');
  }
  
  // API.CreateTask –æ–∂–∏–¥–∞–µ—Ç –æ–±—ä–µ–∫—Ç TaskInput, –∞ –Ω–µ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
  const taskInput = {
    title: title,
    body: body || '',
    priority: priority || 'medium',
    due_at: due_at || null,
    completed: false
  };
  
  try {
    console.log('üì§ Calling CreateTask with TaskInput object:', taskInput);
    return await API.CreateTask(taskInput);
  } catch (error) {
    console.error('‚ùå CreateTask error:', error);
    throw error;
  }
}

async function fetchAll() {
  try {
    if (!API?.List) {
      throw new Error('List API –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
    
    console.log('üì§ Calling List()...');
    const tasks = await API.List();
    state.all = Array.isArray(tasks) ? tasks : [];
    console.log('üìã Loaded tasks:', state.all.length, state.all);
  } catch (error) {
    console.error('‚ùå Error fetching tasks:', error);
    state.all = [];
    showToast('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á: ' + error.message, 'error');
  }
}

async function deleteTask(id) {
  try {
    if (!API?.DeleteTask) {
      throw new Error('DeleteTask API –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
    
    console.log('üì§ Calling DeleteTask with id:', id);
    await API.DeleteTask(id);
    await fetchAll();
    if (state.selectedId === id) {
      state.selectedId = null;
    }
    render();
    showToast('–ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞');
  } catch (error) {
    console.error('‚ùå Error deleting task:', error);
    showToast('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: ' + error.message, 'error');
  }
}

async function toggleTask(id) {
  try {
    const task = state.all.find(t => t.id === id);
    if (!task) return;
    
    if (!API?.SetDone) {
      throw new Error('SetDone API –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
    
    // API.SetDone —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç id –∏ boolean
    console.log('üì§ Calling SetDone with:', id, !task.completed);
    await API.SetDone(id, !task.completed);
    
    await fetchAll();
    render();
    showToast(task.completed ? '–ó–∞–¥–∞—á–∞ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞' : '–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞');
  } catch (error) {
    console.error('‚ùå Error toggling task:', error);
    showToast('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: ' + error.message, 'error');
  }
}

// –†–µ–Ω–¥–µ—Ä–∏–Ω–≥
function render() {
  renderTaskList();
  renderDetail();
  updateCounts();
}

function renderTaskList() {
  const container = $("#taskList");
  if (!container) return;

  if (state.all.length === 0) {
    container.innerHTML = '<div class="empty">–ù–µ—Ç –∑–∞–¥–∞—á</div>';
    return;
  }

  const filtered = getFilteredTasks();
  const sorted = sortTasks(filtered);

  container.innerHTML = sorted.map(task => `
    <div class="note-item ${task.id === state.selectedId ? 'active' : ''} ${task.completed ? 'completed' : ''}" 
         data-id="${task.id}">
      <div class="note-preview">
        <h3 class="note-title">${escapeHtml(task.title)}</h3>
        <div class="note-meta">
          <span class="dot dot-${task.priority}"></span>
          ${task.due_at ? formatDate(task.due_at) : ''}
        </div>
      </div>
    </div>
  `).join('');
}

function renderDetail() {
  const emptyEl = $("#detailEmpty");
  const cardEl = $("#detailCard");
  
  if (!emptyEl || !cardEl) return;

  const task = state.all.find(t => t.id === state.selectedId);
  
  if (!task) {
    emptyEl.hidden = false;
    cardEl.hidden = true;
    return;
  }

  emptyEl.hidden = true;
  cardEl.hidden = false;

  // –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
  const title = $("#detailTitle");
  const body = $("#detailBody");
  const due = $("#detailDue");
  const priority = $("#detailPriority");
  const created = $("#detailCreatedAt");
  const toggleBtn = $("#detailToggleDone");

  if (title) title.textContent = task.title;
  if (body) body.textContent = task.body || '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è';
  if (due) due.textContent = task.due_at ? formatDate(task.due_at) : '‚Äî';
  if (priority) priority.textContent = getPriorityText(task.priority);
  if (created) created.textContent = formatDate(task.created_at);
  if (toggleBtn) {
    toggleBtn.textContent = task.completed ? '–û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ' : '–û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ';
  }
}

function getFilteredTasks() {
  let filtered = state.all;

  // –§–∏–ª—å—Ç—Ä –ø–æ –≤—Ä–µ–º–µ–Ω–∏
  if (state.filter === 'today') {
    const today = new Date().toDateString();
    filtered = filtered.filter(t => t.due_at && new Date(t.due_at).toDateString() === today);
  } else if (state.filter === 'week') {
    const weekFromNow = new Date(Date.now() + 7 * 24 * 60 * 60 * 1000);
    filtered = filtered.filter(t => t.due_at && new Date(t.due_at) <= weekFromNow);
  } else if (state.filter === 'overdue') {
    const now = new Date();
    filtered = filtered.filter(t => t.due_at && new Date(t.due_at) < now && !t.completed);
  } else if (state.filter === 'completed') {
    filtered = filtered.filter(t => t.completed);
  }

  // –§–∏–ª—å—Ç—Ä –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
  if (state.priority) {
    filtered = filtered.filter(t => t.priority === state.priority);
  }

  return filtered;
}

function sortTasks(tasks) {
  return tasks.sort((a, b) => {
    let aVal = a[state.sortBy];
    let bVal = b[state.sortBy];
    
    if (state.sortBy === 'priority') {
      const priorities = { high: 3, medium: 2, low: 1 };
      aVal = priorities[a.priority] || 0;
      bVal = priorities[b.priority] || 0;
    }
    
    if (aVal < bVal) return state.sortOrder === 'asc' ? -1 : 1;
    if (aVal > bVal) return state.sortOrder === 'asc' ? 1 : -1;
    return 0;
  });
}

function updateCounts() {
  const counts = {
    all: state.all.length,
    today: state.all.filter(t => {
      if (!t.due_at) return false;
      const today = new Date().toDateString();
      return new Date(t.due_at).toDateString() === today;
    }).length,
    week: state.all.filter(t => {
      if (!t.due_at) return false;
      const weekFromNow = new Date(Date.now() + 7 * 24 * 60 * 60 * 1000);
      return new Date(t.due_at) <= weekFromNow;
    }).length,
    overdue: state.all.filter(t => {
      if (!t.due_at || t.completed) return false;
      return new Date(t.due_at) < new Date();
    }).length,
    completed: state.all.filter(t => t.completed).length
  };

  Object.entries(counts).forEach(([key, count]) => {
    const el = $(`#count${key.charAt(0).toUpperCase() + key.slice(1)}`);
    if (el) el.textContent = count;
  });
}

// –£—Ç–∏–ª–∏—Ç—ã
function escapeHtml(text) {
  const div = document.createElement('div');
  div.textContent = text;
  return div.innerHTML;
}

function formatDate(dateStr) {
  return new Date(dateStr).toLocaleDateString('ru-RU');
}

function getPriorityText(priority) {
  const map = { high: '–í—ã—Å–æ–∫–∏–π', medium: '–°—Ä–µ–¥–Ω–∏–π', low: '–ù–∏–∑–∫–∏–π' };
  return map[priority] || priority;
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ DOM
document.addEventListener('DOMContentLoaded', function() {
  console.log('üöÄ DOM loaded, initializing...');

  // –ö–Ω–æ–ø–∫–∞ "–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞"
  const newTaskBtn = $("#newTaskBtn");
  if (newTaskBtn) {
    newTaskBtn.addEventListener("click", openCreateModal);
    console.log('‚úÖ New task button initialized');
  }

  // –§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
  const createForm = $("#createForm");
  if (createForm) {
    createForm.addEventListener("submit", async (e) => {
      e.preventDefault();
      console.log('üéØ Form submitted');

      const saveButton = $("#createSave");
      const title = $("#c_title")?.value?.trim();
      const body = $("#c_body")?.value?.trim();
      const due = $("#c_due")?.value;
      const priority = $("#c_priority")?.value;

      console.log('üìù Form data:', { title, body, due, priority });

      if (!title) {
        showToast("–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫", "error");
        $("#c_title")?.focus();
        return;
      }

      // –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É
      if (saveButton) {
        saveButton.disabled = true;
        saveButton.textContent = "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ‚Ä¶";
      }

      try {
        const result = await callCreate({
          title,
          body,
          priority,
          due_at: due ? new Date(due).toISOString() : null
        });

        console.log('‚úÖ Task created:', result);
        
        closeCreateModal();
        createForm.reset();
        showToast("–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞");
        await fetchAll();
        
        // –í—ã–±–∏—Ä–∞–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
        if (result && result.id) {
          state.selectedId = result.id;
        } else if (state.all.length > 0) {
          const lastTask = state.all.reduce((max, task) => 
            task.id > max.id ? task : max, state.all[0]
          );
          state.selectedId = lastTask.id;
        }
        
        render();
      } catch (error) {
        console.error('üí• Error creating task:', error);
        showToast("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É: " + error.message, "error");
      } finally {
        if (saveButton) {
          saveButton.disabled = false;
          saveButton.textContent = "–î–æ–±–∞–≤–∏—Ç—å";
        }
      }
    });
    console.log('‚úÖ Create form initialized');
  }

  // –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã —Å–æ–∑–¥–∞–Ω–∏—è
  const cancelBtn = $("#createCancel");
  if (cancelBtn) {
    cancelBtn.addEventListener("click", (e) => {
      e.preventDefault();
      closeCreateModal();
      $("#createForm")?.reset();
    });
    console.log('‚úÖ Cancel button initialized');
  }

  // –ö–ª–∏–∫ –ø–æ –∑–∞–¥–∞—á–µ –≤ —Å–ø–∏—Å–∫–µ
  const taskList = $("#taskList");
  if (taskList) {
    taskList.addEventListener("click", (e) => {
      const noteItem = e.target.closest('.note-item');
      if (noteItem) {
        const id = parseInt(noteItem.dataset.id);
        state.selectedId = id;
        render();
      }
    });
    console.log('‚úÖ Task list clicks initialized');
  }

  // –ö–Ω–æ–ø–∫–∏ –≤ –¥–µ—Ç–∞–ª—å–Ω–æ–º –ø—Ä–æ—Å–º–æ—Ç—Ä–µ
  const toggleBtn = $("#detailToggleDone");
  if (toggleBtn) {
    toggleBtn.addEventListener("click", () => {
      if (state.selectedId) {
        toggleTask(state.selectedId);
      }
    });
  }

  const deleteBtn = $("#detailDelete");
  if (deleteBtn) {
    deleteBtn.addEventListener("click", () => {
      if (state.selectedId && confirm('–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É?')) {
        deleteTask(state.selectedId);
      }
    });
  }

  // –§–∏–ª—å—Ç—Ä—ã –≤ —Å–∞–π–¥–±–∞—Ä–µ
  $$('[data-filter]').forEach(btn => {
    btn.addEventListener("click", () => {
      $$('.nav-item[data-filter]').forEach(b => b.classList.remove('active'));
      btn.classList.add('active');
      state.filter = btn.dataset.filter;
      state.priority = null;
      $$('.nav-item[data-priority]').forEach(b => b.classList.remove('active'));
      render();
    });
  });

  $$('[data-priority]').forEach(btn => {
    btn.addEventListener("click", () => {
      $$('.nav-item[data-priority]').forEach(b => b.classList.remove('active'));
      if (state.priority === btn.dataset.priority) {
        state.priority = null;
      } else {
        btn.classList.add('active');
        state.priority = btn.dataset.priority;
      }
      render();
    });
  });

  // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
  const sortBy = $("#sort_by");
  const sortOrder = $("#sort_order");
  if (sortBy) {
    sortBy.addEventListener("change", () => {
      state.sortBy = sortBy.value;
      render();
    });
  }
  if (sortOrder) {
    sortOrder.addEventListener("change", () => {
      state.sortOrder = sortOrder.value;
      render();
    });
  }

  // –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  const reloadBtn = $("#reload");
  if (reloadBtn) {
    reloadBtn.addEventListener("click", async () => {
      reloadBtn.disabled = true;
      reloadBtn.textContent = "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...";
      try {
        await fetchAll();
        render();
        showToast("–°–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω");
      } finally {
        reloadBtn.disabled = false;
        reloadBtn.textContent = "–û–±–Ω–æ–≤–∏—Ç—å";
      }
    });
  }

  // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª–∫–∏ –ø–æ ESC –∏ –∫–ª–∏–∫—É –≤–Ω–µ
  document.addEventListener("keydown", (e) => {
    if (e.key === "Escape") {
      const modal = $("#createModal");
      if (modal && !modal.classList.contains("hidden")) {
        closeCreateModal();
      }
    }
  });

  const modal = $("#createModal");
  if (modal) {
    modal.addEventListener("click", (e) => {
      if (e.target === modal) {
        closeCreateModal();
      }
    });
  }

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
  console.log('üîÑ Loading initial data...');
  fetchAll().then(() => {
    render();
    console.log('‚úÖ App initialized successfully!');
  }).catch(err => {
    console.error('‚ùå Failed to load initial data:', err);
    showToast('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö', 'error');
  });
});